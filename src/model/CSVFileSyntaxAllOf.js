/**
 * Delve Client SDK
 * This is a Client SDK for Delve API
 *
 * The version of the OpenAPI document: 1.1.3
 * Contact: support@relational.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CSVFileSyntaxAllOf model module.
 * @module model/CSVFileSyntaxAllOf
 * @version 1.1.3
 */
class CSVFileSyntaxAllOf {
    /**
     * Constructs a new <code>CSVFileSyntaxAllOf</code>.
     * @alias module:model/CSVFileSyntaxAllOf
     * @param datarow {Number} 
     * @param delim {String} 
     * @param escapechar {String} 
     * @param headerRow {Number} 
     * @param ignorerepeated {Boolean} 
     * @param normalizenames {Boolean} 
     * @param quotechar {String} 
     */
    constructor(datarow, delim, escapechar, headerRow, ignorerepeated, normalizenames, quotechar) { 
        
        CSVFileSyntaxAllOf.initialize(this, datarow, delim, escapechar, headerRow, ignorerepeated, normalizenames, quotechar);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, datarow, delim, escapechar, headerRow, ignorerepeated, normalizenames, quotechar) { 
        obj['datarow'] = datarow || 0;
        obj['delim'] = delim || '';
        obj['escapechar'] = escapechar || '';
        obj['header_row'] = headerRow || 0;
        obj['ignorerepeated'] = ignorerepeated || false;
        obj['normalizenames'] = normalizenames || false;
        obj['quotechar'] = quotechar || '';
    }

    /**
     * Constructs a <code>CSVFileSyntaxAllOf</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CSVFileSyntaxAllOf} obj Optional instance to populate.
     * @return {module:model/CSVFileSyntaxAllOf} The populated <code>CSVFileSyntaxAllOf</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CSVFileSyntaxAllOf();

            if (data.hasOwnProperty('datarow')) {
                obj['datarow'] = ApiClient.convertToType(data['datarow'], 'Number');
            }
            if (data.hasOwnProperty('delim')) {
                obj['delim'] = ApiClient.convertToType(data['delim'], 'String');
            }
            if (data.hasOwnProperty('escapechar')) {
                obj['escapechar'] = ApiClient.convertToType(data['escapechar'], 'String');
            }
            if (data.hasOwnProperty('header')) {
                obj['header'] = ApiClient.convertToType(data['header'], ['String']);
            }
            if (data.hasOwnProperty('header_row')) {
                obj['header_row'] = ApiClient.convertToType(data['header_row'], 'Number');
            }
            if (data.hasOwnProperty('ignorerepeated')) {
                obj['ignorerepeated'] = ApiClient.convertToType(data['ignorerepeated'], 'Boolean');
            }
            if (data.hasOwnProperty('missingstrings')) {
                obj['missingstrings'] = ApiClient.convertToType(data['missingstrings'], ['String']);
            }
            if (data.hasOwnProperty('normalizenames')) {
                obj['normalizenames'] = ApiClient.convertToType(data['normalizenames'], 'Boolean');
            }
            if (data.hasOwnProperty('quotechar')) {
                obj['quotechar'] = ApiClient.convertToType(data['quotechar'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {Number} datarow
 * @default 0
 */
CSVFileSyntaxAllOf.prototype['datarow'] = 0;

/**
 * @member {String} delim
 * @default ''
 */
CSVFileSyntaxAllOf.prototype['delim'] = '';

/**
 * @member {String} escapechar
 * @default ''
 */
CSVFileSyntaxAllOf.prototype['escapechar'] = '';

/**
 * @member {Array.<String>} header
 */
CSVFileSyntaxAllOf.prototype['header'] = undefined;

/**
 * @member {Number} header_row
 * @default 0
 */
CSVFileSyntaxAllOf.prototype['header_row'] = 0;

/**
 * @member {Boolean} ignorerepeated
 * @default false
 */
CSVFileSyntaxAllOf.prototype['ignorerepeated'] = false;

/**
 * @member {Array.<String>} missingstrings
 */
CSVFileSyntaxAllOf.prototype['missingstrings'] = undefined;

/**
 * @member {Boolean} normalizenames
 * @default false
 */
CSVFileSyntaxAllOf.prototype['normalizenames'] = false;

/**
 * @member {String} quotechar
 * @default ''
 */
CSVFileSyntaxAllOf.prototype['quotechar'] = '';






export default CSVFileSyntaxAllOf;

